pipeline {
    agent any

    tools {
        nodejs('NodeJS')
    }

    environment {
        NODEJS_HOME = tool name: 'NodeJS' // Assumes NodeJS is configured in Jenkins tools
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
        
        SCANNER_HOME = tool 'SonarQubeScanner'
        SONARQUBE_SERVER = 'SonarQube'  // Name configured for SonarQube in Jenkins
        
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = 'http://10.0.0.247:8081' // Nexus URL
        NEXUS_REPO = 'npm-book-repo'
        NEXUS_CREDENTIALS_ID = 'nexus-user-credentials' // Jenkins credentials ID for Nexus
    }


    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                echo 'Building...'
                sh 'chmod +x node_modules/.bin/*'
                sh 'npm install'
                sh 'npm run build'
            }
        }

        stage('Run Tests') { 
            steps { 
                echo 'Running Tests...'
                sh 'npm test' 
            } 
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh """${SCANNER_HOME}/bin/sonar-scanner -Dsonar.host.url=http://10.0.0.247:9000/ \
                        -Dsonar.token=squ_d216dda9f3c08bd2d5e093373b0ced7f2d09c050 \
                        -Dsonar.projectName="Book_API" \
                        -Dsonar.exclusions=**/node_modules/**,**/coverage/**,**/__tests__/** \
                        -Dsonar.projectKey=Book_API \
                        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info -Dsonar.test.inclusions=tests/**/*.test.js"""
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    echo "Quality Gate is still in progress..."

                    sleep(time: 20, unit: 'SECONDS') // Sleep to wait for the status to update
                    def qualityGate = waitForQualityGate()
                    
                    if (qualityGate.status != 'OK' || qualityGate.status != 'SUCCESS') {
                        echo "Quality Gate failed: ${qualityGate.status}"
                    }
                    else {
                        echo "Quality Gate passed: ${qualityGate.status}"
                    }
                }
            }
        }

        stage('Package') { 
            steps { 
                echo 'Packing...'
                sh 'npm run package' 
                sh 'ls -la publish' // List the contents of the publish directory 
            }
        }

        stage('Publish to Nexus') {
            steps {
                // http://10.0.0.247:8081/repository/npm-book-repo/book_api/-/book_api-1.0.1.tgz
                // http://10.0.0.247:8081/repository/npm-book-repo/book/book_api/1.0.2/book_api-1.0.2.tgz
                echo "Publishing to Nexus repository `${NEXUS_REPO}`..."
                nexusArtifactUploader(
                    nexusVersion: "${NEXUS_VERSION}",
                    protocol: "${NEXUS_PROTOCOL}",
                    nexusUrl: "${NEXUS_URL}",
                    credentialsId: "${NEXUS_CREDENTIALS_ID}",
                    groupId: 'book',
                    repository: "${NEXUS_REPO}",
                    version: '1.0.2',
                    artifacts: [
                        [
                            artifactId: 'book_api',   
                            classifier: '',
                            file: 'publish/my-app.tgz',
                            type: 'tgz'
                        ]
                    ]
                )
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}