pipeline {
    agent any

    tools {
        nodejs('NodeJS')
    }

    environment {
        SCANNER_HOME = tool 'SonarQubeScanner'
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NODEJS_HOME = tool name: 'NodeJS' // Assumes NodeJS is configured in Jenkins tools
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
        SONARQUBE_SERVER = 'SonarQube'  // Name configured for SonarQube in Jenkins
        NEXUS_URL = 'localhost:8081' //'10.0.0.247:8081' // Nexus URL
        NEXUS_REPO = 'npm-book-repo'
        NEXUS_CREDENTIALS_ID = 'npm-nexus-creds' // Jenkins credentials ID for Nexus
    }

    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'npm install' 
            }
        }
        
        stage('Build') {
            steps {
                withCredentials([file(credentialsId: 'npm-nexus-creds', variable: 'mynpmrc')]) {
                    echo 'Building...'
                    // sh 'npm install --userconfig $mynpmrc --registry http://10.0.0.247:8081/repository/npm-book-repo --loglevel verbose'
                    sh 'npm install --userconfig $mynpmrc --registry http://localhost:8081/repository/npm-book-repo --loglevel verbose'
                }
            }
        }

        stage('SonarQube Analysis') { 
            steps { 
                script { 
                     // sh """${SCANNER_HOME}/bin/sonar-scanner -Dsonar.host.url=http://10.0.0.247:9000/ \
                    withSonarQubeEnv('SonarQube') { 
                        sh """${SCANNER_HOME}/bin/sonar-scanner -Dsonar.host.url=http://localhost:9000/ \
                        -Dsonar.token=squ_55b9cb9407d8c5810b57b10a9ea114c652611367 \
                        -Dsonar.projectName="Book_API" \ \
                        -Dsonar.projectKey=Book_API"""
                    } 
                } 
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    sleep(time: 20, unit: 'SECONDS') // Sleep to wait for the status to update 
                    def qualityGate = waitForQualityGate() 
                    if (qualityGate.status == 'IN_PROGRESS') { 
                        sleep(time: 20, unit: 'SECONDS') // Sleep to wait for the status to update 
                        qualityGate = waitForQualityGate()
                        error "Quality Gate is still in progress. Retrying..." 
                    } 
                    
                    if (qualityGate.status != 'OK') { 
                        error "Quality Gate failed: ${qualityGate.status}" 
                    } 
                    else { 
                        echo "Quality Gate passed: ${qualityGate.status}" 
                    }  
                }
            }
        }
        

        stage('Publish to Nexus') {
            steps {
                withCredentials([file(credentialsId: 'npm-nexus-creds', variable: 'mynpmrc')]) {
                    echo 'Publishing to Nexus...'
                    sh 'npm publish --userconfig $mynpmrc --loglevel verbose'
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
