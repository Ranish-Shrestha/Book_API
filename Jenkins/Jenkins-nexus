pipeline {
    agent any

    tools {
        nodejs('NodeJS')
    }

    environment {
        SCANNER_HOME = tool 'SonarQubeScanner'
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NODEJS_HOME = tool name: 'NodeJS' // Assumes NodeJS is configured in Jenkins tools
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
        SONARQUBE_SERVER = 'SonarQube'  // Name configured for SonarQube in Jenkins
        NEXUS_URL = 'localhost:8081' // Nexus URL
        NEXUS_REPO = 'npm-book-repo'
        NEXUS_CREDENTIALS_ID = 'nexus-user-credentials' // Jenkins credentials ID for Nexus
    }

    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'npm install' 
                sh 'npm install --save-dev zip-cli'
            }
        }
        
        stage('Build') {
            steps {
                sh 'npm run build' 
            }
        }

        stage('SonarQube Analysis') { 
            steps { 
                script { 
                    withSonarQubeEnv('SonarQube') { 
                        sh """${SCANNER_HOME}/bin/sonar-scanner -Dsonar.host.url=http://10.0.0.247:9000/ \
                        -Dsonar.token=squ_ee990db47a9bdffa732b9fea384c2782eb8e56e1 \
                        -Dsonar.projectName="Book_API" \
                        -Dsonar.exclusions=**/node_modules/** \
                        -Dsonar.projectKey=Book_API"""
                    } 
                } 
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
        
        stage('Archive Artifact') {
            steps {
                archiveArtifacts artifacts: 'dist/**', allowEmptyArchive: true
            }
        }

        stage('Deploy to Nexus') {
            steps {
                nexusArtifactUploader(
                    nexusVersion: "${NEXUS_VERSION}",
                    artifacts: [
                        [
                            artifactId: 'my-app',
                            classifier: '',
                            file: 'dist/my-app.zip',
                            type: 'zip'
                        ]
                    ],
                    credentialsId: "${NEXUS_CREDENTIALS_ID}",
                    groupId: 'com.example',
                    protocol: "${NEXUS_PROTOCOL}",
                    nexusUrl: "${NEXUS_URL}",
                    repository: "${NEXUS_REPO}",
                    version: '1.0.0'
                )
            }
        }
    }

    // post {
    //     success {
    //         echo 'Pipeline completed successfully!'
    //     }
    //     failure {
    //         echo 'Pipeline failed.'
    //     }
    // }
}
